{"version":3,"sources":["webpack:///./src/app/user/login.component.html","webpack:///./src/app/user/login.component.ts","webpack:///./src/app/user/profile.component.html","webpack:///./src/app/user/profile.component.ts","webpack:///./src/app/user/user.module.ts","webpack:///./src/app/user/user.routes.ts"],"names":[],"mappings":"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","file":"app-user-user-module.js","sourcesContent":["module.exports = \"<h1>Login</h1>\\r\\n<hr>\\r\\n<div class=\\\"col-md-4\\\">\\r\\n  <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"login(loginForm.value)\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"userName\\\">User Name:</label>\\r\\n      <em *ngIf=\\\"loginForm.controls.userName?.invalid && (loginForm.controls.userName?.touched || mouseoverLogin)\\\">Required</em>\\r\\n      <input (ngModel)=\\\"username\\\" name=\\\"userName\\\" id=\\\"userName\\\" type=\\\"text\\\" class=\\\"form-control\\\" required placeholder=\\\"User Name...\\\" />\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"password\\\">Password:</label>\\r\\n      <em *ngIf=\\\"loginForm.controls.password?.invalid && (loginForm.controls.password?.touched || mouseoverLogin)\\\">Required</em>\\r\\n      <input (ngModel)=\\\"password\\\" name=\\\"password\\\" id=\\\"password\\\" type=\\\"password\\\" class=\\\"form-control\\\" required placeholder=\\\"Password...\\\" />\\r\\n    </div>\\r\\n\\r\\n    <span (mouseenter)=\\\"mouseoverLogin=true\\\" (mouseleave)=\\\"mouseoverLogin=false\\\"> <!--buttons cant handle events-->\\r\\n      <button type=\\\"submit\\\" [disabled]=\\\"loginForm.invalid\\\" class=\\\"btn btn-primary\\\">Login</button>\\r\\n    </span>\\r\\n    <button type=\\\"button\\\" (click)=\\\"cancel()\\\" class=\\\"btn btn-default\\\">Cancel</button>\\r\\n  </form>\\r\\n  <br />\\r\\n  <div *ngIf=\\\"loginInvalid\\\" class=\\\"alert alert-danger\\\">\\r\\n    Invalid Login Info\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  templateUrl: './login.component.html',\r\n  styles: [\r\n    `em {float:right; color:#E05C65; padding-left:10px}`\r\n  ]\r\n})\r\nexport class LoginComponent {\r\n  username; // in prod mode the binding (ngModel)=\"username\" is not defined\r\n  password; // in prod mode the binding (ngModel)=\"password\" is not defined\r\n  mouseoverLogin; // same\r\n  loginInvalid = false;\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  login(formValues) {\r\n    this.authService.loginUser(formValues.userName, formValues.password)\r\n      .subscribe(resp => {\r\n        if (!resp) {\r\n          this.loginInvalid = true;\r\n        } else {\r\n          this.router.navigate(['events']);\r\n        }\r\n      });\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['events']);\r\n  }\r\n}\r\n","module.exports = \"<div>\\r\\n  <h1>Edit Your Profile </h1>\\r\\n  <hr>\\r\\n  <div class=\\\"col-md-4\\\">\\r\\n    <form [formGroup]=\\\"profileForm\\\" autocomplete=\\\"off\\\" novalidate (ngSubmit)=\\\"saveProfile(profileForm.value)\\\">\\r\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'error': !validateFirstName() }\\\">\\r\\n        <label for=\\\"firstName\\\">First Name:</label>\\r\\n        <em *ngIf=\\\"!validateFirstName() && profileForm.controls.firstName.errors.required\\\">Required</em>\\r\\n        <em *ngIf=\\\"!validateFirstName() && profileForm.controls.firstName.errors.pattern\\\">Must start with a letter</em>\\r\\n        <input formControlName=\\\"firstName\\\" id=\\\"firstName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"First Name...\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'error': !validateLastName() }\\\">\\r\\n        <label for=\\\"lastName\\\">Last Name:</label>\\r\\n        <em *ngIf=\\\"!validateLastName()\\\">Required</em>\\r\\n        <input formControlName=\\\"lastName\\\" id=\\\"lastName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Last Name...\\\" />\\r\\n      </div>\\r\\n\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" style=\\\"float:right\\\" (click)=\\\"logout()\\\">Logout</button>\\r\\n    </form>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport { Toastr, TOASTR_TOKEN } from '../common/toastr.service';\r\n\r\n@Component({\r\n  templateUrl: './profile.component.html',\r\n  styles: [`\r\n      em {float:right; color: #E05C65; padding-left: 10px }\r\n      .error input {background-color:#E3C3C5 }\r\n      .error ::-webkit-input-placeholder { color: #999 }\r\n      .error ::-moz-placeholder { color: #999 }\r\n      .error :-moz-placeholder { color: #999 }\r\n      .error :ms-input-placeholder { color: #999 }\r\n    `]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\r\n  profileForm: FormGroup;\r\n  private firstName: FormControl;\r\n  private lastName: FormControl;\r\n\r\n  constructor(private authService: AuthService, private router: Router, @Inject(TOASTR_TOKEN) private toastr: Toastr) { }\r\n\r\n  ngOnInit() {\r\n    this.firstName = new FormControl(this.authService.currentUser.firstName, [Validators.required, Validators.pattern('[a-zA-Z].*')]);\r\n    this.lastName = new FormControl(this.authService.currentUser.lastName, Validators.required);\r\n    this.profileForm = new FormGroup({\r\n      firstName: this.firstName,\r\n      lastName: this.lastName\r\n    });\r\n  }\r\n\r\n  saveProfile(formValues) {\r\n    if (this.profileForm.valid) {\r\n      this.authService.updateCurrentUser(formValues.firstName, formValues.lastName)\r\n        .subscribe(() => {\r\n          this.toastr.success('Profile Saved');\r\n        });\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['events']);\r\n  }\r\n\r\n  logout(){\r\n    this.authService.logout().subscribe(() => {\r\n      this.router.navigate(['/user/login']);\r\n    });\r\n  }\r\n\r\n  validateLastName() {\r\n    return this.lastName.valid || this.lastName.untouched;\r\n  }\r\n\r\n  validateFirstName() {\r\n    return this.firstName.valid || this.firstName.untouched;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { userRoutes } from './user.routes';\r\n\r\n\r\nimport { ProfileComponent } from './profile.component';\r\nimport { LoginComponent } from './login.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(userRoutes)\r\n  ],\r\n  declarations: [\r\n    ProfileComponent,\r\n    LoginComponent\r\n  ],\r\n  providers: [\r\n  ]\r\n})\r\n\r\nexport class UserModule { }\r\n","import { ProfileComponent } from './profile.component';\r\nimport { LoginComponent } from './login.component';\r\n\r\nexport const userRoutes = [\r\n  {path: 'profile', component: ProfileComponent},\r\n  {path: 'login', component: LoginComponent}\r\n];\r\n"],"sourceRoot":""}